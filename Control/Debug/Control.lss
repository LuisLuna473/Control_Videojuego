
Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000270  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b11  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082c  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e8  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000320  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000261e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Setup>:
		}
    }
}

void Setup(void){
	cli();
  a6:	f8 94       	cli
	DDRB &= ~((1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0));
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	80 7e       	andi	r24, 0xE0	; 224
  ac:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1<<PORTB4)|(1<<PORTB3)|(1<<PORTB2)|(1<<PORTB1)|(1<<PORTB0));
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8f 61       	ori	r24, 0x1F	; 31
  b2:	85 b9       	out	0x05, r24	; 5
	DDRD &= ~(1<<DDD7);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8b b9       	out	0x0b, r24	; 11

				//PB0-PB5
	PCMSK0 = (1<<PCINT4)|(1<<PCINT3)|(1<<PCINT2)|(1<<PCINT1)|(1<<PCINT0);
  c0:	8f e1       	ldi	r24, 0x1F	; 31
  c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PCICR |= (1<< PCIE0);
  c6:	e8 e6       	ldi	r30, 0x68	; 104
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
	
	//PD7
	PCMSK2 = (1<<PCINT23);
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	PCICR |= (1<<PCIE2);
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 83       	st	Z, r24
	
	DDRC |= (1<<DDC5)|(1<<DDC4)|(1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
  dc:	87 b1       	in	r24, 0x07	; 7
  de:	8f 63       	ori	r24, 0x3F	; 63
  e0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
  e2:	18 b8       	out	0x08, r1	; 8
	SetupUART0(M9600);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 12 01 	call	0x224	; 0x224 <SetupUART0>
	sei(); 
  ea:	78 94       	sei
  ec:	08 95       	ret

000000ee <main>:
void Setup(void);

volatile uint8_t comando = 6;
int main(void)
{
    Setup();
  ee:	0e 94 53 00 	call	0xa6	; 0xa6 <Setup>
			PORTC &= ~((1<<PORTC5)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0));
		}else if(comando == 5){
			PORTC |= (1<<PORTC5);
			PORTC &= ~((1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0));
		}*/
		switch(comando){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	39 f1       	breq	.+78     	; 0x148 <main+0x5a>
  fa:	28 f4       	brcc	.+10     	; 0x106 <main+0x18>
  fc:	88 23       	and	r24, r24
  fe:	51 f0       	breq	.+20     	; 0x114 <main+0x26>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	a9 f0       	breq	.+42     	; 0x12e <main+0x40>
 104:	f6 cf       	rjmp	.-20     	; 0xf2 <main+0x4>
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	c9 f1       	breq	.+114    	; 0x17c <main+0x8e>
 10a:	58 f1       	brcs	.+86     	; 0x162 <main+0x74>
 10c:	85 30       	cpi	r24, 0x05	; 5
 10e:	09 f4       	brne	.+2      	; 0x112 <main+0x24>
 110:	42 c0       	rjmp	.+132    	; 0x196 <main+0xa8>
 112:	ef cf       	rjmp	.-34     	; 0xf2 <main+0x4>
			case 0:
				writeUART('f');
 114:	86 e6       	ldi	r24, 0x66	; 102
 116:	0e 94 2f 01 	call	0x25e	; 0x25e <writeUART>
				PORTC |= (1<<PORTC0);
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<PORTC5)|(1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1));
 120:	88 b1       	in	r24, 0x08	; 8
 122:	81 7c       	andi	r24, 0xC1	; 193
 124:	88 b9       	out	0x08, r24	; 8
				comando = 6; 
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 12c:	e2 cf       	rjmp	.-60     	; 0xf2 <main+0x4>
			case 1:
				//Enviar comando 'a'
				writeUART('a');
 12e:	81 e6       	ldi	r24, 0x61	; 97
 130:	0e 94 2f 01 	call	0x25e	; 0x25e <writeUART>
				PORTC |= (1<<PORTC1);
 134:	88 b1       	in	r24, 0x08	; 8
 136:	82 60       	ori	r24, 0x02	; 2
 138:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<PORTC5)|(1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC0));
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	82 7c       	andi	r24, 0xC2	; 194
 13e:	88 b9       	out	0x08, r24	; 8
				comando = 6;
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 146:	d5 cf       	rjmp	.-86     	; 0xf2 <main+0x4>
			case 2:
				//Enviaiar comando 'b'
				writeUART('b');
 148:	82 e6       	ldi	r24, 0x62	; 98
 14a:	0e 94 2f 01 	call	0x25e	; 0x25e <writeUART>
				PORTC |= (1<<PORTC2);
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	84 60       	ori	r24, 0x04	; 4
 152:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<PORTC5)|(1<<PORTC4)|(1<<PORTC3)|(1<<PORTC1)|(1<<PORTC0));
 154:	88 b1       	in	r24, 0x08	; 8
 156:	84 7c       	andi	r24, 0xC4	; 196
 158:	88 b9       	out	0x08, r24	; 8
				comando = 6;
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 160:	c8 cf       	rjmp	.-112    	; 0xf2 <main+0x4>
			case 3:
				//Enviar comando 'c'
				writeUART('c');
 162:	83 e6       	ldi	r24, 0x63	; 99
 164:	0e 94 2f 01 	call	0x25e	; 0x25e <writeUART>
				PORTC |= (1<<PORTC3);
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<PORTC5)|(1<<PORTC4)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0));
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	88 7c       	andi	r24, 0xC8	; 200
 172:	88 b9       	out	0x08, r24	; 8
				comando = 6;
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 17a:	bb cf       	rjmp	.-138    	; 0xf2 <main+0x4>
			case 4:
				//
				writeUART('d');
 17c:	84 e6       	ldi	r24, 0x64	; 100
 17e:	0e 94 2f 01 	call	0x25e	; 0x25e <writeUART>
				PORTC |= (1<<PORTC4);
 182:	88 b1       	in	r24, 0x08	; 8
 184:	80 61       	ori	r24, 0x10	; 16
 186:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<PORTC5)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0));
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	80 7d       	andi	r24, 0xD0	; 208
 18c:	88 b9       	out	0x08, r24	; 8
				comando = 6;
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 194:	ae cf       	rjmp	.-164    	; 0xf2 <main+0x4>
			case 5:
				//
				writeUART('e');
 196:	85 e6       	ldi	r24, 0x65	; 101
 198:	0e 94 2f 01 	call	0x25e	; 0x25e <writeUART>
				PORTC |= (1<<PORTC5);
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0));
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	80 7e       	andi	r24, 0xE0	; 224
 1a6:	88 b9       	out	0x08, r24	; 8
				comando = 6;
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 1ae:	a1 cf       	rjmp	.-190    	; 0xf2 <main+0x4>

000001b0 <__vector_3>:
	PORTC = 0;
	SetupUART0(M9600);
	sei(); 
}

ISR(PCINT0_vect){
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
	/*if ((PINB & (1<<PINB5)) == 0){
		//Encender Led <-
		comando = 5;
		PORTC |= (1<<PORTC5);
	}*/
	if ((PINB & (1<<PINB0)) == 0){
 1bc:	18 9b       	sbis	0x03, 0	; 3
		//Encender Led <-
		comando = 0;
 1be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		//PORTC |= (1<<PORTC0);
	}
	if ((PINB & (1<<PINB1)) == 0){
 1c2:	19 99       	sbic	0x03, 1	; 3
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <__vector_3+0x1c>
		//Encender Led <-
		comando = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//PORTC |= (1<<PORTC1);
	}
	if ((PINB & (1<<PINB2)) == 0){
 1cc:	1a 99       	sbic	0x03, 2	; 3
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <__vector_3+0x26>
		//Encender Led <-
		comando = 2;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//PORTC |= (1<<PORTC2);
	}
	if ((PINB & (1<<PINB3)) == 0){
 1d6:	1b 99       	sbic	0x03, 3	; 3
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <__vector_3+0x30>
		//Encender Led <-
		comando = 3;
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//PORTC |= (1<<PORTC3);
	}
	if ((PINB & (1<<PINB4)) == 0){
 1e0:	1c 99       	sbic	0x03, 4	; 3
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <__vector_3+0x3a>
		//Encender Led <-
		comando = 4;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//PORTC |= (1<<PORTC4);
	}
	
	PCIFR &= ~(1<<TOV0);
 1ea:	8b b3       	in	r24, 0x1b	; 27
 1ec:	8e 7f       	andi	r24, 0xFE	; 254
 1ee:	8b bb       	out	0x1b, r24	; 27
}
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_5>:

ISR(PCINT2_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
	if ((PIND & (1<<PIND7)) == 0){
 208:	4f 99       	sbic	0x09, 7	; 9
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__vector_5+0x16>
		//Encender Led <-
		comando = 5;
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//PORTC |= (1<<PORTC5);
	}
	PCIFR &= ~(1<<TOV2);
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	8b bb       	out	0x1b, r24	; 27
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <SetupUART0>:
	
	for (int i=0; Texto[i]!='\0'; i++){
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
}
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	d1 f4       	brne	.+52     	; 0x25c <SetupUART0+0x38>
 228:	8a b1       	in	r24, 0x0a	; 10
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	8a b9       	out	0x0a, r24	; 10
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	82 60       	ori	r24, 0x02	; 2
 232:	8a b9       	out	0x0a, r24	; 10
 234:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 238:	e1 ec       	ldi	r30, 0xC1	; 193
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	10 82       	st	Z, r1
 23e:	80 81       	ld	r24, Z
 240:	88 69       	ori	r24, 0x98	; 152
 242:	80 83       	st	Z, r24
 244:	e2 ec       	ldi	r30, 0xC2	; 194
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	10 82       	st	Z, r1
 24a:	80 81       	ld	r24, Z
 24c:	86 60       	ori	r24, 0x06	; 6
 24e:	80 83       	st	Z, r24
 250:	87 e6       	ldi	r24, 0x67	; 103
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 25c:	08 95       	ret

0000025e <writeUART>:

void writeUART(char Caracter){
	while(!(UCSR0A & (1<<UDRE0)));
 25e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 262:	95 ff       	sbrs	r25, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <writeUART>
	UDR0 = Caracter;
 266:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
